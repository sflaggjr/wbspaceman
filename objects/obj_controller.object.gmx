<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Game State Variables
randomize();
global.game = states.gameMenu;
volume = 0.5;
view_object[0] = obj_player;
menu[0] = "Start";
menu[1] = "How to Play";
menu_position = 0;
text_spacing = 32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_escape) == true){
    scr_gameEnd();
    };

if (keyboard_check_pressed(vk_f2)) {
    global.game = states.gameMenu;
    scr_gameMenu();
    };
if (global.game = states.play) {
    if (lives &lt;= 0){
        global.game = states.gameOver;
        scr_gameEnd();
        };
    };
    
audio_master_gain(volume);

if (global.game == states.gameMenu) {
    var move = 0;
    move -= max(keyboard_check_pressed(vk_left), gamepad_button_check(0, gp_padl), 0);
    move += max(keyboard_check_pressed(vk_right), gamepad_button_check(0, gp_padr), 0);
    
    if (move != 0) {
        menu_position += move;
        if (menu_position &lt; 0) {
            menu_position = array_length_1d(menu) - 1;
            };
        if (menu_position &gt; array_length_1d(menu) - 1) {
            menu_position = 0;
            };
        }
    var confirm;
    confirm = max(keyboard_check_released(vk_space), gamepad_button_check_released(0, gp_face1),0);
    
    if (confirm == 1) {
        scr_confirm(menu_position);
        };
    };
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.game == states.play{
    draw_set_font(font0);
    draw_text(10, 10, 'Score: ' + string(score));
    draw_sprite_ext(spr_player, image_index, view_hport[0] - 40, 30, 0.5, 0.5, 0, c_white, 1);
    draw_text(view_hport[0] - 20, 10, 'x' + string(lives));
    };

if (global.game == states.gameOver){
    draw_set_font(font1);
    draw_text(view_hport[0] / 2, view_yport[0] / 2, "Game Over");
    draw_text(view_hport[0] / 2, view_yport[0] + 250, "Score: " + string(score));
    };

if (global.game == states.gameMenu){
    //Draw Menu fluff
    draw_set_color(c_gray);
    draw_set_font(font2);
    draw_text(x + 5, y + 10, "W.B. Spaceman");
    draw_set_color(c_black);
    draw_text(x + 10, y + 10, "W.B. Spaceman");
    draw_sprite(spr_wb, image_index, 800, 540);
    //Draw Menu
    draw_set_font(font0);
    draw_set_color(c_gray);
    for (i = 0; i &lt;= array_length_1d(menu) - 1; i++) {
        draw_text(string_length(menu[i]) * text_spacing, 600 + text_spacing, menu[i]);
        };
      if (menu_position == 0) {
        draw_set_color(c_black);
        draw_text(string_length(menu[0]) * text_spacing - 5, 600 + text_spacing, menu[0]);
    };
    if (menu_position == 1) {
        draw_set_color(c_black);
        draw_text(string_length(menu[1]) * text_spacing - 5, 600 + text_spacing, menu[1]);
    };
};
  

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
