<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Game State Variables
randomize();
global.game = states.gameMenu;
volume = 0.5;
view_object[0] = obj_player;
menu[0] = "Start";
menu[1] = "How to Play";
menu[2] = "Quit";
menu_position = 0;
text_spacing = 2;
xRect = 0;
yRect = 0;
nextScreen = false;
paused = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.game = states.levelInit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_escape) == true){
    scr_gameEnd();
    };

if (keyboard_check_pressed(vk_f2)) {
    global.game = states.gameMenu;
    scr_gameMenu();
    };

if (global.game = states.play) {
    //Dying
    if (lives &lt;= 0){
        global.game = states.gameOver;
        scr_gameEnd();
        };
    };
    
audio_master_gain(volume);

if (global.game == states.gameMenu) {
    if(!audio_is_playing(mus_mainMenu)) {
        current_track = mus_mainMenu;
        audio_play_sound(current_track, 1, 1);
        };
    var move = 0;
    move -= max(keyboard_check_pressed(vk_left), gamepad_button_check(0, gp_padl), 0);
    move += max(keyboard_check_pressed(vk_right), gamepad_button_check(0, gp_padr), 0);
    
    if (move != 0) {
        menu_position += move;
        if (menu_position &lt; 0) {
            menu_position = array_length_1d(menu) - 1;
            };
        if (menu_position &gt; array_length_1d(menu) - 1) {
            menu_position = 0;
            };
        }
    var confirm;
    confirm = max(keyboard_check_released(vk_enter), gamepad_button_check_released(0, gp_face1),0);
    
    if (confirm == 1) {
        scr_confirm(menu_position);
        };
    };
if (global.game == states.levelSummary) {
    if (xRect &lt;= 1024) {
        xRect += 30;
        };
    if (yRect &lt;= 768) {
        yRect += 30;
    };
    instance_deactivate_all(true);
    nextScreen = max(keyboard_check_pressed(vk_enter), gamepad_button_check_pressed(0, gp_face1));
    if (nextScreen == 1) {
        instance_activate_all();
        global.game = states.levelInit;
    };
};

if (keyboard_check_pressed(vk_escape)) {
    if (global.game == states.play) {
        global.game = states.pause;
        instance_deactivate_all(true)
        };
    else {
        global.game = states.play;
        instance_activate_all();
        };
    };
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ww = 1024;
var wh = 768;
//Notify player of how many asteroids are left before next level
if global.game == states.play{
    var asteroidCount = instance_number(obj_asteroid_s);
    draw_set_font(font0);
    draw_text(10, 10, '$' + string(score));
    draw_sprite_ext(spr_player, image_index, ww - 150, 30, 0.5, 0.5, 0, c_white, 1);
    draw_text(ww - 100, 10, 'x' + string(lives));
     if (!instance_exists(obj_asteroid_l) &amp;&amp; !instance_exists(obj_asteroid_m)){   
        if (asteroidCount &lt;= 3) {
        draw_text(ww - 500, 700, "Asteroids Left: " + string(asteroidCount));
            };
        };
    };

if (global.game == states.levelSummary) {
    draw_set_font(font1);
    draw_set_color(c_black);
    draw_rectangle(0, 0, xRect, yRect, 0);
    draw_set_color(c_white);
    draw_text(ww / 4, 100, "Day " + string(global.currentLevel) + " Summary");
    draw_text(ww / 3, 200, "$ " + string(score));
    draw_set_font(font0);
    draw_text(ww / 4, wh - 400, "Press enter for Day " + string(global.currentLevel + 1));
    draw_set_color(c_black);
    };  
    
if (global.game == states.gameOver){
    draw_set_font(font1);
    draw_text(ww / 5, wh - 600, "Game Over");
    draw_text(ww / 5, wh - 500, "You Survived: " + string(global.currentLevel) + " Days");
    draw_text(ww / 5, wh - 400, "and made: $ " + string(score));
    };

if (global.game == states.gameMenu){
    //Draw Menu fluff
    draw_set_color(c_gray);
    draw_set_font(font2);
    draw_text(x + 5, y + 10, "W.B. Spaceman");
    draw_set_color(c_black);
    draw_text(x + 10, y + 10, "W.B. Spaceman");
    draw_sprite(spr_wb, image_index, 800, 540);
    draw_set_font(font0);
    draw_text(ww / 6, wh - 100, "Press Enter to Select");
    //Draw Menu
    draw_set_font(font0);
    /*draw_set_color(c_gray);
        for (i = 0; i &lt;= array_length_1d(menu) - 1; i++) {
        draw_text(10 + string_length(menu[i]), 500 * text_spacing, menu[i]);
        };*/
    if (menu_position == 0) {
        draw_set_color(c_gray);
        draw_text(string_length(menu[0]) * text_spacing + 5, (text_spacing * 2) + 500, menu[menu_position + 1]);
        draw_set_color(c_black);
        draw_text(string_length(menu[0]) * text_spacing, 500 + text_spacing, menu[0]);
    };
    if (menu_position == 1) {
        draw_set_color(c_black);
        draw_text(string_length(menu[1]) * text_spacing + 5, 500 + text_spacing, menu[1]);
    };
    if (menu_position == 2) {
        draw_set_color(c_black);
        draw_text(string_length(menu[2]) * text_spacing + 5, 500 + text_spacing, menu[2]);
        };
};
  
if (global.game == states.howToPlay) {
    scr_howToPlay();
    };

if (global.game == states.pause) {
    draw_set_font(font2);
    draw_set_color(c_black);
    draw_text(window_get_width() - 700, window_get_height() - 400, "PAUSED");
    };
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
